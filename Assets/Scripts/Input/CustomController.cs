//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/CustomController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomController"",
    ""maps"": [
        {
            ""name"": ""TopViewControl"",
            ""id"": ""e1ba5ba5-29d5-4286-a64c-b06751ba7247"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c4573efe-0575-431d-8ceb-0b1c09bd1169"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""5ddcf19b-79d9-46ad-acad-5be8471a7413"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""861abbf6-43c3-481f-a74e-6f1efc0e3cf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8a1ec415-c919-40bc-839c-aaf1bbf4ead3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f0c565dc-fa67-4f03-8db3-b0a92c1ae2a0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""628966a7-f9b5-491d-82ed-8d453147be6f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""83d46d5f-caf4-4e12-91be-84cece7fd8c1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""931546c2-2f5e-4a96-b9c1-abaeaf7657f4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e12f442a-c3eb-487a-bcba-63ea3813361d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3b75a65-f334-4180-b7a0-2d7b158d7616"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TopViewControl
        m_TopViewControl = asset.FindActionMap("TopViewControl", throwIfNotFound: true);
        m_TopViewControl_Move = m_TopViewControl.FindAction("Move", throwIfNotFound: true);
        m_TopViewControl_Look = m_TopViewControl.FindAction("Look", throwIfNotFound: true);
        m_TopViewControl_Sprint = m_TopViewControl.FindAction("Sprint", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TopViewControl
    private readonly InputActionMap m_TopViewControl;
    private List<ITopViewControlActions> m_TopViewControlActionsCallbackInterfaces = new List<ITopViewControlActions>();
    private readonly InputAction m_TopViewControl_Move;
    private readonly InputAction m_TopViewControl_Look;
    private readonly InputAction m_TopViewControl_Sprint;
    public struct TopViewControlActions
    {
        private @CustomController m_Wrapper;
        public TopViewControlActions(@CustomController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TopViewControl_Move;
        public InputAction @Look => m_Wrapper.m_TopViewControl_Look;
        public InputAction @Sprint => m_Wrapper.m_TopViewControl_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_TopViewControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TopViewControlActions set) { return set.Get(); }
        public void AddCallbacks(ITopViewControlActions instance)
        {
            if (instance == null || m_Wrapper.m_TopViewControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopViewControlActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(ITopViewControlActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(ITopViewControlActions instance)
        {
            if (m_Wrapper.m_TopViewControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITopViewControlActions instance)
        {
            foreach (var item in m_Wrapper.m_TopViewControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopViewControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TopViewControlActions @TopViewControl => new TopViewControlActions(this);
    public interface ITopViewControlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
}
